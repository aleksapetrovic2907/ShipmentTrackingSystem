@using Domain.Models
@using Services

@page "/shipments/{Id:guid}"

@inject HttpClient Http
@inject NavigationManager NavManager
@inject ShipmentService ShipmentService
@inject AuthService AuthService
@inject IJSRuntime JS

<h1>Shipment Details</h1>

@if (shipment == null)
{
    <p>Loading shipment details...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Status</th>
                <th>Created At</th>
                <th>Delivered At</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@shipment.Id</td>
                <td>@shipment.Name</td>
                <td>@shipment.Status</td>
                <td>@shipment.CreatedAt.ToShortDateString()</td>
                <td>@(shipment.DeliveredAt?.ToShortDateString() ?? "Not Delivered")</td>
                <td>
                    <button class="action-btn btn-warning" @onclick="() => NavigateToShipment(shipment.Id)">
                        Edit
                    </button>
                    @if (AuthService.IsAuthenticated)
                    {
                        <button class="action-btn btn-danger" @onclick="() => DeleteShipment(shipment.Id)">
                            Delete
                        </button>
                    }
                </td>
            </tr>
        </tbody>
    </table>

    <button class="btn btn-primary" @onclick="NavigateBack">Back to Shipments</button>
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    private Shipment? shipment;

    protected override async Task OnInitializedAsync()
    {
        AuthService.OnAuthStateChanged += StateHasChanged;

        try
        {
            shipment = await Http.GetFromJsonAsync<Shipment>($"shipments/{Id}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching shipment details: {ex.Message}");
        }
    }

    private void NavigateBack()
    {
        NavManager.NavigateTo("/shipments");
    }

    private async Task DeleteShipment(Guid shipmentId)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", "Delete this shipment?");

        if (!confirmed) return;

        if (await ShipmentService.DeleteShipmentAsync(shipmentId))
        {
            Console.WriteLine($"Shipment {shipmentId} deleted successfully.");
            NavigateBack();
        }
        else
        {
            Console.WriteLine($"Failed to delete shipment {shipmentId}");
        }
    }

    private void NavigateToShipment(Guid id) => NavManager.NavigateTo($"/shipments/edit/{id}");
}
