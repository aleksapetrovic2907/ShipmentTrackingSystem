@using Domain.Models

@page "/shipments/{Id:guid}"

@inject HttpClient Http
@inject NavigationManager NavManager

<h1>Shipment Details</h1>

@if (shipment == null)
{
    <p>Loading shipment details...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <td>ID</td>
                <th>Name</th>
                <th>Status</th>
                <th>Created At</th>
                <th>Delivered At</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@shipment.Id</td>
                <td>@shipment.Name</td>
                <td>@shipment.Status</td>
                <td>@shipment.CreatedAt.ToShortDateString()</td>
                <td>@(shipment.DeliveredAt?.ToShortDateString() ?? "Not Delivered")</td>
            </tr>
        </tbody>
    </table>

    <button class="btn btn-primary" @onclick="NavigateBack">Back to Shipments</button>
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    private Shipment? shipment;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            shipment = await Http.GetFromJsonAsync<Shipment>($"shipments/{Id}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching shipment details: {ex.Message}");
        }
    }

    private void NavigateBack()
    {
        NavManager.NavigateTo("/shipments");
    }
}
