@using Domain.Models
@using Services

@page "/shipments"
@inject HttpClient Http
@inject ShipmentService ShipmentService
@inject NavigationManager NavManager
@inject AuthService AuthService
@inject IJSRuntime JS

<h1>Shipments List</h1>

@if (shipments == null)
{
    <p>Loading shipments...</p>
}
else if (!shipments.Any())
{
    <p>No shipments found.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Status</th>
                <th>Created At</th>
                <th>Delivered At</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var shipment in shipments)
            {
                <tr>
                    <td>
                        <NavLink class="link" href=@($"/shipments/{shipment.Id}")>
                            @shipment.Name
                        </NavLink>
                    </td>
                    <td>@shipment.Status</td>
                    <td>@shipment.CreatedAt.ToShortDateString()</td>
                    <td>@(shipment.DeliveredAt?.ToShortDateString() ?? "Not Delivered")</td>
                    <td>
                        <button class="action-btn btn-warning" @onclick="() => NavigateToShipment(shipment.Id)">
                            Edit
                        </button>
                        @if (AuthService.IsAuthenticated)
                        {
                            <button class="action-btn btn-danger" @onclick="() => DeleteShipment(shipment.Id)">
                                Delete
                            </button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Shipment> shipments;

    protected override async Task OnInitializedAsync()
    {
        AuthService.OnAuthStateChanged += StateHasChanged;
        await LoadShipments();
    }

    private async Task LoadShipments()
    {
        shipments = await ShipmentService.GetAllShipmentsAsync();
    }

    private async Task DeleteShipment(Guid shipmentId)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", "Delete this shipment?");

        if (!confirmed) return;

        if (await ShipmentService.DeleteShipmentAsync(shipmentId))
        {
            Console.WriteLine($"Shipment {shipmentId} deleted successfully.");
            await LoadShipments();
        }
        else
        {
            Console.WriteLine($"Failed to delete shipment {shipmentId}");
        }
    }

    private void NavigateToShipment(Guid id) => NavManager.NavigateTo($"/shipments/edit/{id}");
}
